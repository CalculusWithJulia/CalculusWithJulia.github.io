# Vectors

There are examples where numbers are naturally paired off, for example
a point in the $x$-$y$ plane is naturally represented by a pair of
numbers. A bit more generally, we have an example from physics of
describing the laws of motion of a projectile, such as an arrow flying
when wind effects are not known. A two-dimensional picture represents
the trajectory with $y$ as the height and $x$ the distance from the
shooter. The projectile itself has three main quantities of
interest: its position, its velocity and its acceleration. Each in
turn has two components -- one in the $x$ direction and one in the
$y$.



The basic equations of motion are derived from Newton's laws
and govern the position, velocity, and acceleration of the
projectile. The formulas depend on an initial
position, which we take to be $\langle x_0,~ y_0 \rangle$, an initial
velocity $\langle v_{0x},~ v_{0y} \rangle$, and time $t > 0$. The three
values for a given time $t$ are then:

$$~
\begin{align}
\vec{x} &= \langle x_0 + v_{0x}t,~ -(1/2) g t^2 + v_{0y}t  + y_0 \rangle,\\
\vec{v} &= \langle v_{0x},~ -gt + v_{0y}t \rangle, \text{ and }\\
\vec{a} &= \langle 0,~ -g \rangle.
\end{align}
~$$



{{{xva_trajectory}}}

We have used the notation $\langle x,~ y \rangle$ to collect the two
values into a single object, which we indicate through a label on the
variable name. These are vectors, and we shall see they find use far
beyond this application.



A line segment in the plane connects two points $(x_0, y_0)$ and
$(x_1, y_1)$. The length of a line segment (its magnitude) is given by
the distance formula $\sqrt{(x_1 - x_0)^2 + (y_1 - y_0)^2}$.  A line
segment can be given a direction by assigning an initial point and a
terminal point. A directed line segment has both a direction and a
magnitude. A vector is an abstraction where just these two properties
-- a direction and a magnitude -- are intrinsic. While a directed line
segment can be represented by a vector, a single vector describes all
such line segments found by translation. That is, how the the vector
is located when visualized is for convenience, it is not a characteristic of
the vector. In the figure above, all vectors are drawn with their tails
at the position of the projectile over time.



We can visualize a vector as an arrow in two-dimensional space. This arrow
has two components. We represent a vector
than mathematically as $\langle x,~ y \rangle$. For example, the vector
connecting the point $(x_0, y_0)$ to $(x_1, y_1)$ is $\langle x_1 -
x_0,~ y_1 - y_0 \rangle$.

The magnitude of a vector comes from the distance formula, and is
$\| \vec{v} \| = \sqrt{x^2 + y^2}$.


{{{generic_vector}}}


We call the values $x$ and $y$ of the vector $\vec{v} = \langle x,~ y
\rangle$ the components of the $v$.

Two operations on vectors are fundamental.

* Vectors can be multiplied by a scalar (a real number): $c\vec{v} =
  \langle cx,~ cy \rangle$. Geometrically this scales the vector by a
  factor of $\lvert c \rvert$ and switches the direction of the vector
  by 180 degree when $c < 0$. A *unit vector* is one with magnitude 1,
  and, except for the $\vec{0}$ vector, can be formed from $\vec{v}$ by dividing
  $\vec{v}$ by its magnitude. A unit vector gives the direction of a vector and its norm the magnitude.




* Vectors can be added: $\vec{v} + \vec{w} = \langle v_x + w_x,~ v_y + w_y
  \rangle$. That is, each corresponding component adds to form a new
  vector. Similarly for subtraction. The $\vec{0}$ vector then would be just
  $\langle 0,~ 0 \rangle$ and would satisfy $\vec{0} + \vec{v} = \vec{v}$ for any vector
  $\vec{v}$. The vector addition $\vec{v} + \vec{w}$ is visualized by placing the tail
  of $\vec{w}$ at the tip of $\vec{v}$ and then considering the new vector with
  tail coming from $\vec{v}$ and tip coming from the position of the tip of
  $\vec{w}$. Subtraction is different, place both the tails of $\vec{v}$ and $\vec{w}$
  at the same place and the new vector has tail at the tip of $\vec{v}$ and
  tip at the tip of $\vec{w}$.


{{{vector_addition_image}}}


{{{vector_subtraction_image}}}




The concept of scalar multiplication and addition, allow the
decomposition of vectors into standard vectors. The standard unit
vectors in two dimensions are $e_x = \langle 1,~ 0 \rangle$ and $e_y =
\langle 0,~ 1 \rangle$. Any two dimensional vector can be written
uniquely as $a e_x + b e_y$ for some pair of scalars $a$ and $b$ (or as, $\langle a, b \rangle$). This
is true more generally where the two vectors are not the standard unit
vectors -- they can be *any* two non-parallel vectors.




{{{vector_decomp}}}




When a vector is placed with its tail at the origin, it can be
described in terms of the angle it makes with the $x$ axis, $\theta$,
and its length, $r$. The following formulas apply:

$$~
r = \sqrt{x^2 + y^2}, \quad \tan(\theta) = y/x.
~$$

If we are given $r$ and $\theta$, then the vector is $v = \langle r \cdot \cos(\theta),~ r \cdot \sin(\theta) \rangle$.

{{{vector_rtheta}}}

## Vectors in Julia

A vector in `Julia` can be represented by its individual components,
but it is more convenient to combine them into a collection using the
`[,]` notation:

```
x, y = 1, 2
v = [x, y]        # square brackets, not angles
```

The basic vector operations are implemented for vector objects.
For example, the vector `v` has scalar multiplication defined for it:

```
10 * v
```

The `norm` function returns the magnitude of the vector (by default):

```
norm(v)
```

A unit vector is then found by scaling by the reciprocal of the magnitude:

```
v / norm(v)
```



In addition, if `w` is another vector, we can add and subtract:

```
w = [3, 2]
v + w, v - 2w
```

We see above that scalar multiplication, addition, and subtraction can
be done without new notation. This is because the usual operators have
methods defined for vectors.

## Higher dimensional vectors

Mathematically, vectors can be generalized to more than 2
dimensions. For example, using 3-dimensional vectors are common when
modeling events happening in space, and 4-dimensional vectors are
common when modeling space and time.


In `Julia` there are many uses for vectors outside of physics
applications. A vector in `Julia` is just a one-dimensional collection
of similarly typed values. Such objects find widespread usage. For example:

- In plotting graphs with `Julia`, vectors are used to hold the $x$
and $y$ coordinates of a collection of points to plot and connect with
straight lines. There can be hundreds of such points in a plot.

- Vectors are a a natural container to hold the roots of a polynomials.

- Vectors may be used to record the state of an iterative process.

- Vectors are naturally used to represent a data set, such as arise
when collecting survey data.

Creating higher-dimensional vectors is similar to creating a
two-dimensional vector, we just include more components:

```
fibs = [1,1,2,3,5,8,13]
```

Later we will discuss different ways to modify the values of a vector
to create new ones, similar to how scalar multiplication does.

As mentioned, vectors in  `Julia`  are comprised of elements of a similar type, but the
type is not limited to numeric values. For example, a vector of
strings might be useful for text processing, a vector of Boolean
values can naturally arise, some applications are even naturally
represented in terms of vectors of vectors. Look at the output of these two vectors:

```
["one", "two", "three"]  # Array{T, 1} is shorthand for Vector{T}. Here T -- the type -- is ASCIIString
```

```
[true, false, true]		# vector of Bool values
```


Finally, we mention that if `Julia` has values of different types it
will promote them to a common type if possible. Here we combine three
types of numbers, and see that each is promoted to `Float64`:

```
[1, 2.0, 3//1]
```


Whereas, in this example where there is no common type to promote the
values to, a catch-all type of `Any` is used to hold the components.

```
["one", 2, 3.0, 4//1]
```



## Indexing

Getting the components out of a vector can be done in a manner similar to multiple assignment:

```
v = [1, 2]
x, y = v
```

When the same number of variable names are on the left hand side of
the assignment as in the container on the right, each is assigned in
order.

Though this is convenient for small vectors, it is far from being so
if the vector has a large number of components. However, the vector is
stored in order with a first, second, third, $\dots$
component. `Julia` allows these values to be referred to by
*index*. This too uses the `[]` notation, though differently (in
analogy to how `(a,b)` forms tuples, but `a(b)` is a function call
notation). Here is how we get the second component of `v`:

```
v[2]
```

The last value of a vector is usually denoted by $v_n$. In `Julia`,
the `length` function will return $n$, the number of items in the
container. So `v[length(v)]` will refer to the last
component. However, the special keyword `end` will do so as well, when
put into the context of indexing. So `v[end]` is more idiomatic.


```
note("""
There is <a href=http://julia.readthedocs.org/en/latest/manual/arrays/#indexing>much more</a>
to indexing than just indexing by a single integer value. For example, the following can be used for indexing:

* a scalar integer (as seen)

* a range 

* a vector of integers

* a boolean vector

Some add on packages extend this further.
""",
title="More on indexing", label="More on indexing")
```

### Assignment and indexing

This notation can also be used for assignment. The following
expression replaces the second component with a new value:

```
v[2] = 10
```

The right hand side is returned, not the value for `v`. We can check
that `v` is now $\langle 1,~ 10 \rangle$ by showing it:

```
v
```

The assignment `v[2]` is different than the initial assignment
`v=[1,2]` in that, `v[2]=10` modifies the container that `v` points
to, whereas `v=[1,2]` replaces the binding for `v`. The indexed
assignment is then more memory efficient when vectors are large. This
point is also of interest when passing vectors to functions, as a
function may modify components of the vector passed to it, though
can't replace the container itself.

## Some functions useful when working with vectors.

As mentioned, the `length` function returns the number of components
in a vector. It is one of several useful functions for vectors.

The `sum` and `prod` function will add and multiply the elements in a vector:

```
v = [1,1,2,3,5,8]
sum(v), prod(v)
```

The `unique` function will throw out any duplicates:

```
unique(v) # drop a `1`
```

The functions `maximum` and `minimum` will return the largest and smallest values of an appropriate vector.

```
v = [1,4,2,3]
maximum(v)
```

(These should not be confused with `max` and `min` which give the largest or smallest value over all their arguments.)

The `extrema` function returns both the smallest and largest value of a collection:

```
extrema(v)
```

The `sort` function will rearrange the values in `v`:

```
sort(v)
```

The keyword argument, `rev=false` can be given to get values in decreasing order:

```
sort(v, rev=false)
```

For adding a new element to a vector the `push!` method can be used, as in

```
push!(v, 5)
```

To append more than one value, the `append!` function can be used:

```
append!(v, [6,8,7])
```

These two functions modify or mutate the values stored within the
vector `v` that passed as an argument. In the `push!` example above,
the value `5` is added to the vector of 4 elements. In `Julia`, a
convention is to name mutating functions with a trailing exclamation
mark. (Again, these do not mutate the binding of `v` to the container,
but do mutate the contents of the container.) There are functions with
mutating and non-mutating definitions, an example is `sort` and
`sort!`.

If only a mutating function is available, like `push!`, and this is
not desired a copy of the vector can be made. It is not enough to copy
by assignment, as with `w = v`. As both `w` and `v` will be bound to
the same memory location. Rather, you call `copy` to make a new
container with copied contents, as in `w = copy(v)`.

Creating new vectors of a given size is common for programming, though
not much use will be made here. There are many different functions to
do so: `ones` to make a vector of ones, `zeros` to make a vector of
zeros, `trues` and `falses` to make Boolean vectors of a given size,
and `similar` to make a similar-sized vector (with no particular
values assigned).





## Questions

###### Question

Which command will create the vector $\vec{v} = \langle 4,~ 3 \rangle$?

```
choices = [
q"v = [4,3]",
q"v = {4, 3}",
q"v = '4, 3'",
q"v = (4,3)",
q"v = <4,3>"]
ans = 1
radioq(choices, ans)
```

###### Question

Which command will create the vector with components "4,3,2,1"?

```
choices = [q"v = [4,3,2,1]", q"v = (4,3,2,1)", q"v = {4,3,2,1}", q"v = '4, 3, 2, 1'", q"v = <4,3,2,1>"]
ans = 1
radioq(choices, ans)
```





###### Question

What is the magnitude of the vector $\vec{v} = \langle 10,~ 15 \rangle$?

```
v = [10, 15]
val = norm(v)
numericq(val)
```


###### Question

Which of the following is the unit vector in the direction of $\vec{v} = \langle 3,~ 4 \rangle$?

```
choices = [q"[3,4]", q"[0.6, 0.8]", q"[1.0, 1.33333]", q"[1,1]"]
ans = 2
radioq(choices, ans)
```


###### Question

What vector is in the same direction as $\vec{v} = \langle 3,~ 4 \rangle$ but is 10 times as long?

```
choices = [q"[3,4]", q"[30, 40]", q"[ 9.48683, 12.6491 ]", q"[10, 10]"]
ans = 2
radioq(choices, ans)
```

###### Question

If $\vec{v} = \langle 3,~ 4 \rangle$ and $\vec{w} = \langle 1,~ 2 \rangle$  find $2\vec{v} + 5 \vec{w}$.

```
choices = [q"[4,6]", q"[6,8]", q"[11,18]", q"[5,10]"]
ans = 3
radioq(choices, ans)
```

###### Question

Let `v` be defined by:

```
Verbatim("""
v = [1,1,2,3,5,8,13,21]
""")
```

What is the length of `v`?

```
v = [1,1,2,3,5,8,13,21]
val = length(v)
numericq(val)
```


What is the `sum` of `v`?

```
v = [1,1,2,3,5,8,13,21]
val = sum(v)
numericq(val)
```

What is the `prod` of `v`?


```
v = [1,1,2,3,5,8,13,21]
val = prod(v)
numericq(val)
```

