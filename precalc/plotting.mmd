# The Graph of a Function



A univariate function, such as $f(x) = 1 - x^2/2$, can be thought of in many different ways. For example, 

* It can be represented through a rule of what it does to $x$, as above. This is useful for computing numeric values.

* it can be interpreted verbally, as in *square* $x$, take half then *subtract* from
  one. This can give clarity to what the function does.

* It can be thought of in terms of its properties: a polynomial, continuous, $U$-shaped, $\dots$

* it can be visualized graphically. This is useful for seeing the qualitative behaviour of a function.



The graph of a univariate function is just a set of points in the
Cartesian plane. These points come from the relation $(x,f(x))$ that
defines the function. Operationally, a sketch of the graph will
consider a handful of such pairs and then the rest of the points will
be imputed.

For example, a typical approach to plot $f(x) = 1 - x^2/2$ would be to choose some values for $x$ and find the corresponding values of $y$. This might be organized in a "T"-table:

```
Verbatim("""
 x | y
-- | --
-2 | -1
-1 | 1/2
 0 | 1
 1 | 1/2
 2 | -1
 3 | -7/2
""")
```

These pairs would be plotted in a Cartesian plane and then connected with curved lines. A good sketch is aided by knowing ahead of time that this function describes a parabola which is curving downwards.

It is important to note that this sketch would not include *all* the pairs $(x,f(x))$, as their extent is infinite.

## Graphing a function with Julia

`Julia` has several different options for rendering graphs, all in external packages. Such packages include `Gadfly`, `Winston`, `PyPlot`, `Bokeh`, and `Plotly`. We will focus in these notes on the `Gadfly` package for most graphics and the `PyPlot` package for 3-dimensional graphics. As such, we begin by loading the `Gadfly` package (which must have been installed on the system at some point with a command such as `Pkg.add("Gadfly")`.)

```
using Gadfly
```

The `Gadfly` package makes pretty plots very easy to generate, but has
a drawback in that it is slow to load and the first plot made can take
a long time to render, though subsequent ones are speedy. Focusing on
the easyness, we can see that it is very easy to graph a function.

For example, to graph $f(x) = 1 - x^2/2$ over the interval $[-3,3]$ we have:

```
f(x) = 1 - x^2/2
plot(f, -3, 3)
```

The `plot` command does the hard work behind the scenes. It needs 2 pieces of information:

* what to plot. With this invocation, this detail is expressed by passing a function object to `plot`

* where to plot. As with a sketch, it is impossible in this case to render a graph with all possible $x$ values in the domain of $f$, so we need to pick some viewing window. In the example this is $[-3,3]$ which is expressed by passing the two endpoints as the second and third arguments.

Plotting a function is then this simple: `plot(f, a, b)`.

> A basic template. Many operations we meet will take the form
> `action(function, args...)`, as the call to `plot` does. The
> template shifts the focus to the action to be performed. This is a
> [declarative](http://en.wikipedia.org/wiki/Declarative_programming)
> style, where the details to execute the action are only exposed as
> needed.

To see some other graphs, we can plot the `sin` function over one period with:

```
plot(sin, 0, 2pi)
```

We can make a graph of $f(x) = (1+x^2)^{-1}$ over $[-3,3]$ with

```
f(x) = 1 / (1 + x^2)
plot(f, -3, 3)
```

Or a graph of $f(x) = e^{-x^2/2}$ over $[-2,2]$ with:

```
f(x) = exp(-x^2/2)
plot(f, -2, 2)
```

We could skip the first step of defining a function by using an *anonymous function* instead. For example, to plot $f(x) = \cos(x) - x$ over $[0, \pi/2]$ we could do:

```
plot(x -> cos(x) - x, 0, pi/2)
```

```
note("""

The function object in the general pattern `action(function, args...)`
is commonly specified in three ways: by a name, as with `f`; as an
anonymous function; or as the return value of some other action
through composition.

""")
```

Making a graph with `Gadfly` is easy, but producing a graph that is
informative can be a challenge, as the choice of a viewing window can
make a big difference in what is seen. For example, trying to make a
graph of $f(x) = \tan(x)$ will result in a bit of a mess below, as the
viewing window crosses several places where the function blows up:

```
f(x) = tan(x)
plot(f, -2pi, 2pi)
```

## The details of graph making

The actual details of making a graph of $f$ over $[a,b]$ are pretty simple and follow the steps in making a "T"-table:

* A set of $x$ values are created between $a$ and $b$.

* A corresponding set of $y$ values are created.

* The pairs $(x,y)$ are plotted as points and connected with straight lines.

The only real difference is that when drawing by hand, we might know
to curve the lines connecting points based on an analysis of the
function. As `Julia` doesn't consider this, the points are connected
with straight lines like a dot-to-dot puzzle.

### Creating $x$ values

The mechanics of creating a dot-to-dot plot are useful to know. The set of $x$ values
between $a$ and $b$ can be generated through a range. Suppose $n=250$
points between $0$ and $2\pi$ are desired. Then we have

```
a, b, n = 0, 2pi, 250
xs = a:(b-a)/(n-1):b
```

will create a recipe to cover 250 evenly spaced points between
$[a,b]$. An alternative function to create a similar collection of
points is provided by `linspace` through the call `linspace(a, b, n)`.
The `linspace` function is usually more convenient for the task
of plotting.

### Creating $y$ values

To create the $y$ values can be done many different ways, we will discuss two. The first is through a comprehension:

```
ys = [f(x) for x in xs]
```

Recall, the notation above mirrors the definition of a set of points, $\{f(x): x \text{ in } xs\}$.

```
note(L"""

The style employed here is to use plural variable names for a collection
of values, such as the vector of $y$ values and singular names when a
single value is being referred to, hence "`x in xs`".

""")
```

#### Maps

Comprehensions have familiar notation, but can be a bit verbose to type, especially when a function object is already defined.The `map` function does the same task of applying the specified function over a collection of values:

```
ys = map(f, xs)
```

(Usage of the `map` function also follows the form `action(function, args...)`.)

Either way, it isn't too much work to create the $y$ values from the $x$ values.

### Plotting points and connecting them

Finally, to plot the set of points and connect with lines. This last
step varies with the different plotting packages. For some, the
command is just `plot(xs, ys)`. However, `Gadfly` requires a
specification of what the values are and how they are to be
represented:

```
plot(x=xs, y=ys, Geom.line)
```


#### NaN values

The funny `Geom.line` specification instructs `Gadfly` to connect the points with a line. A specification `Geom.points` would plot the values as points without lines connecting them. Both could be used to emphasize the points and connect with lines.

At times it is not desirable to draw lines. For example, if there is a discontinuity in the function or if there were a vertical asymptote, such as what happens at $0$ with $1/x$. There is a convention that if the $y$ value for a point is `NaN` that no lines will connect. This is convenient in many cases, though not with $1/x$ as `1/0` is `Inf` and not `NaN`. (Unlike `0/0` which is NaN.

Here is one way to plot $f(x) = 1/x$ over $[-1,1]$:

```
f(x) = 1/x
xs = linspace(-1, 1, 251)
ys = map(f, xs)
ys[xs .== 0.0] = NaN
plot(x=xs, y=ys, Geom.line)
```

By using an odd number of points, we ensure that $0.0$ is amongst the `xs`. The next to last line replaces the $y$ value that would be infinite with `NaN`.

Alternatively, you might modify the function itself to return `NaN` for values close to $0$:

```
g(x) = abs(x) < .01 ? NaN : f(x)
plot(g, -1, 1)
```

(Just replacing the value when `x == 0.0` won't work, as `Gadfly` chooses an even number of points by default to plot, so $0$ won't be in the values used between $-1$ and $1$.)

##### Example: Reflections

The graph of a function may be reflected through a line, as those seen with a mirror. For example, a reflection through the $y$ axis takes a point $(x,y)$ to the point $(-x, y)$. We can easily see this graphically, when we have sets of $x$ and $y$ values through a judiciously placed minus sign.

For example, to plot $\sin(x)$ over $(-\pi,\pi)$ we might do:

```
xs = linspace(-pi, pi)
ys = [sin(x) for x in xs]
plot(x = xs, y = ys, Geom.line)
```

To reflect this graph through the $y$ axis, we only need to plot `-xs` and not `xs`:

```
plot(x = -xs, y = ys, Geom.line)
```

Looking carefully we see there is a difference. (How?)

There are four common reflections discussed:

- reflection through the $y$-axis takes $(x,y)$ to $(-x, y)$.

- reflection through the $x$-axis takes $(x,y)$ to $(x, -y)$.

- reflection through the origin takes $(x,y)$ to $(-x, -y)$.

- reflection through the line $y=x$ takes $(x,y)$ to $(y,x)$.

For the $\sin(x)$ graph, we see that reflecting through the $x$ axis
produces the same graph as reflecting through the $y$ axis:

```
plot(x = xs, y = -ys, Geom.line)
```

However, reflecting through the origin leaves this graph unchanged:

```
plot(x = -xs, y = -ys, Geom.line)
```

> An *even function* is one where reflection through the $y$ axis
> leaves the graph unchanged. That is, $f(-x) = f(x)$.  An *odd function*
> is one where a reflection through the origin leaves the
> graph unchanged, or symbolically $f(-x) = -f(x)$.


If we try reflecting the graph of $\sin(x)$ through the line $y=x$, we have:

```
plot(x = ys, y = xs, Geom.line(preserve_order=true))
```

This is the graph of the equation $x = \sin(y)$, but is not the graph of a function as the same $x$ can map to more than one $y$ value. (The new graph does not pass the "vertical line" test.)

(The extra argument `preserve_order=true` passed to `Geom.line` is necessary to prevent `Gadfly` from sorting the `x` values before plotting.)


However, for the sine function we can get a function from this reflection if we choose a narrower viewing window:

```
xs = linspace(-pi/2, pi/2)
ys = [sin(x) for x in xs]
plot(x = ys, y = xs, Geom.line(preserve_order=true))
```

The graph is that of the "inverse function" for $\sin(x), x \text{ in } [-\pi/2, \pi/2]$. 

## Layers

Graphing more than one function over the same viewing window is often
desirable. This is easily done in `Gadfly` by specifying a vector of
functions as the first argument to `plot` instead of a single function
object. The notation is `[f1, f2, ..., fn]`. For example, to see that
the polynomial and the cosine function are "close" near $0$, we can
plot *both* $\cos(x)$ and the function $f(x) = 1 - x^2/2$ over
$[-\pi/2,\pi/2]$:

```
f(x) = 1 - x^2/2
plot([cos, f], -pi/2, pi/2)
```

The vector `[cos, f]` is comprised of function objects and not function calls, such as `cos(x)`.


Another useful function to add to a plot is one to highlight the $x$
axis. This makes identifying zeros of the function easier. The
anonymous function `x->0` will do this. But, perhaps less cryptically,
so will the function `zero`. For example

```
f(x) = x^5 - x + 1
plot([f, zero], -1.5, 1.4)
```


`Gadfly` renders these graphs with $layers$. It also provides a legend
to indicate which function is which, with `f1` being the first,
etc. In some cases, one can click on the legend to toggle the display
of the layer.

### Adding layers explicitly

It can be useful at times to create these layers manually. For example, suppose we wish to plot the function $f(x)=x\cdot(x-1)$ over the interval $[-1,2]$ and emphasize with points the fact that $0$ and $1$ are zeros. We can do this with two layers: the first to graph the function, the second to graph the points. Here is how:

```
f(x) = x*(x-1)
xs = linspace(-1, 2)
ys = map(f, xs)
plot(layer(x=xs, y=ys, Geom.line),
     layer(x=[0,1], y=[0,0], Geom.point))
```

Additional layers are added through additional `layer` calls. Basically, the arguments to `layer` mirror those to `plot`.

## Parametric graphs

If we have two functions $f(x)$ and $g(x)$ there are a few ways to
investigate their joint behaviour. As just mentioned, we can graph
both $f$ and $g$ over the same interval by passing the vector of
functions `[f,g]` to `plot`. Such a graph allows an easy comparison of
the shape of the two functions and can be useful in solving $f(x) =
g(x)$. For the latter, the graph of $h(x) = f(x) - g(x)$ is also of
value: solutions to $f(x)=g(x)$ appear as crossing points on the graph
of `[f,g]`, whereas they appear as zeros (crossings of the $x$-axis)
when `h` is plotted.

A different graph can be made to compare the two side-by-side. This is
a parametric plot. Rather than plotting points $(x,f(x))$ and
$(x,g(x))$ with two separate graphs, the graph consists of points
$(f(x), g(x))$. We illustrate with some examples below:

##### Example

The most "famous" parametric graph is one we are already familiar with, as it follows the parametrization of points on the unit circle by the angle, which we denote by `x`:

```
f(x) = cos(x); g(x) = sin(x)
xs = linspace(0, 2pi)
plot(x = map(f, xs), y = map(g, xs), Geom.line(preserve_order=true))
```

Any point $(a,b)$ on this graph is represented by $(\cos(x), \sin(x))$
for some value of $x$, and in fact multiple values of $x$, since $x +
2k\pi$ will produce the same $(a,b)$ value as $x$ will.

Making the parametric plot is similar to creating a plot using lower
level commands. There is a function to generate a sequence of value to
approximate the $x$ values used (`xs`), a set of commands to create
the corresponding function values (e.g., `map(f,xs)`), and some
instruction on how to represent the values, in this case with lines
connecting the points. The argument `preserve_order=true` is required
to get the points to be connected in the correct manner (otherwise the
$x$ points are sorted before connecting the points with lines).

##### Example

Looking at growth. Comparing $x^2$ with $x^3$ can run into issues, as the scale gets big:

```
g(x) = x^2
f(x) = x^3
plot([g,f], 0, 25)
```

In the above, $f$ is already $25$ times larger on the scale of $[0,25]$
and this only gets worse if the viewing window were to get
larger. However, the parametric graph is quite different:

```
xs = linspace(0, 5)
plot(x=map(g, xs), y=map(f, xs), Geom.line(preserve_order=true))
```

In this graph, as $f(x)/g(x) = x$, as $x$ gets large, the ratio stays reasonable.

##### Example

Parametric plots are useful to compare the ratio of values near a
point. In the above example, we see how this is helpful for large
`x`. This example shows it is convenient for a fixed `x`, in this case
`x=0`.

Plot $g(x) = x - \sin(x)$ and $g(x) = x^3$ around $x=0$:

```
xs = linspace(-pi/2, pi/2)
g(x) = x - sin(x); f(x) = x^3
plot(x=map(g,xs), y=map(f, xs),  Geom.line(preserve_order=true))
```

This graph is *nearly* a straight line. At the point $(0,0)=(g(0),
f(0))$, we see that both functions are behaving in a similar manner,
though the slope is not $1$, so they do not increase at exactly the
same rate.

##### Example: Etch A Sketch

[Etch A sketch](http://en.wikipedia.org/wiki/Etch_A_Sketch) is a
drawing toy where a two knobs control the motion of a pointer, one
knob controlling the $x$ motion, the other the $y$ motion. The trace
of the movement of the pointer is recorded until the display is
cleared by shaking. Shake to clear is now a motion incorporated by some smart-phone apps.

Playing with the toy makes a few things become clear:

* Twisting just the left knob (the horizontal or $x$ motion) will move
  the pointer left or right, leaving a horizontal
  line. Parametrically, this would follow the equations $g(t) =
  \xi(t)$ for some $\xi$ and $f(t) = 0$.

* Twisting just the right knob (the vertical or $y$ motion) will move
  the pointer up or down, leaving a vertical line.  Parametrically, this would follow the
  equations $g(t) = 0$  and $f(t) = \psi(t)$ for some $\psi$.

* Drawing a line with a slope different from $0$ or $\infty$ requires
  moving both knobs at the same time. A 45$^\circ$ line with slope $m=1$
  can be made by twisting both at the same rate, say through $g(t) =
  ct$, $f(t)=ct$. It doesn't matter how big $c$ is, just that it is
  the same for both $g$ and $f$. Creating a different slope is done by
  twisting at different rates, say $g(t)=ct$ and $f(t)=dt$. The slope
  of the resulting line will be $d/c$.

* Drawing a curve is done by twisting the two knobs with varying rates.

These all apply to parametric plots, as the Etch A Sketch trace is no
more than a plot of $(g(t), f(t))$ over some range of values for $t$,
where $g$ describes the movement in time of the left knob and $f$ the
movement in time of the right.

Now, thinking about the last problem in the context of this, we saw in
the last problem that the parametric graph was nearly a line -- so
close the eye can't really tell otherwise. That means that the rates
of change in $t$ of both $g(t)=t - \sin(t)$ and $f(t) = t^3$ for $t$ around
$0$ are in a nearly fixed ratio, as otherwise the graph would have a
curve in it.

##### Example: Spirograph

Parametric plots can describe a richer set of curves than can plots of
functions. Plots of functions must pass the "vertical-line test", as
there can be at most one $y$ value for a given $x$ value. This is not
so, as the circle example above shows. Plotting sines and cosines this
way is the basis for the popular
[Spirograph](http://en.wikipedia.org/wiki/Spirograph) toy. The curves
drawn there are parametric plots where the functions come from rolling
a smaller disc either around the outside or inside of a larger disc.

Here is an example using a parameterization provided on the Wikipedia
page where $R$ is the radius of the larger disc, $r$ the radius of the
smaller disc and $\rho < r$ indicating the position of the pencil
within the smaller disc.

```
R, r, rho = 1, 1/4, 1/4
g(t) = (R-r) * cos(t) + rho * cos((R-r)/r * t)
f(t) = (R-r) * sin(t) - rho * sin((R-r)/r * t)

xs = linspace(0, max((R-r)/r, r/(R-r))*2pi, 1000)
plot(x = map(g, xs), y = map(f, xs), Geom.line(preserve_order=true))
```

In the above, one can fix $R=1$. Then different values for `r` and
`rho` will produce different graphs. These graphs will be periodic if
$(R-r)/r$ is a rational.

## Questions

###### Question

Plot the function $f(x) = x^3 - x$ over $[-2,2]$. How many zeros are there? 

```
val = 3;
numericq(val, 1e-16)
```

###### Question


Plot the function $f(x) = x^3 - x$. When is the function positive?

```
choices = ["`(-Inf, -1)` and `(0,1)`",
	"`(-Inf, -0.577)` and `(0.577, Inf)`",
	"`(-1, 0)` and `(1, Inf)`"
	];
ans=3;
radioq(choices, ans)
```


###### Question


Plot the function $f(x) = 3x^4 + 8x^3 - 18x^2$. Where (what $x$ value)
is the smallest value? (That is, for which input $x$ is the output
$f(x) as small as possible.

```
f(x) = 3x^4 + 8x^3 - 18x^2
val = -3;
numericq(val, 0.25)
```

###### Question


Plot the function $f(x) = 3x^4 + 8x^3 - 18x^2$. When is the function increasing?

```
choices = ["`(-Inf, -3)` and `(0, 1)`",
	"`(-3, 0)` and `(1, Inf)`",
	"`(-Inf, -4.1)` and `(1.455, Inf)`"
	];
ans=2;
radioq(choices, ans)
```
###### Question


The function $f(x) = (x^3 - 2x) / (2x^2 -10)$ is a rational function
with issues when $2x^2 = 10$, or $x = -\sqrt{5}$ or $\sqrt{5}$.

Plot this function from $-5$ to $5$. How many times does it cross the $x$ axis?

```
val = 3;
numericq(val, .2)
```

###### Question

A trash collection plan charges a flat rate of 35 dollars a month for
the first 10 bags of trash and is 4 dollars a bag thereafter. Which
function will model this:


```
choices = [
"`f(x) = x <= 35.0 ? 10.0 : 10.0 + 35.0 * (x-4)`",
"`f(x) = x <= 4    ? 35.0 : 35.0 + 10.0 * (x-4)`",
"`f(x) = x <= 10   ? 35.0 : 35.0 +  4.0 * (x-10)`"
]
ans = 3
radioq(choices, ans)
```

Make a plot of the model. Graphically estimate how many bags of trash will cost 55 dollars.

```
ans = 15
numericq(ans, .5)
```

###### Question

Plot the functions $f(x) = \cos(x)$ and $g(x) = x$. Estimate the $x$ value of where the two graphs intersect.

```
using Roots
val = fzero(x -> cos(x) -x, .7)
numericq(val, .25)
```

###### Question

Graphing both `f` and the line $y=0$ can be done through
`[f, x->0]`. This helps focus on the *zeros* of `f`. When
`f(x)=log(x)-2`, plot `f` and the line $y=0$.  Identify the lone zero.

```
val = fzero(x -> log(x) - 2, 8)
numericq(val, .5)
```


###### Question

The fact that only a finite number of points are used in a graph can
introduce artifacts. An example can appear when plotting
[sinusoidal](http://en.wikipedia.org/wiki/Aliasing#Sampling_sinusoidal_functions)
functions. An example is the graph of `f(x) = sin(500*pi*x)` over `[0,1]`. Make the graph. What do you see:

```
choices = [L"It oscillates wildly, as the period is $T=2\pi/(500 \pi)$ so there are 250 oscillations.",
	"It should oscillate evenly, but instead doesn't oscillate very much near 0 and 1",
	L"It looks like the graph of $f(x) = \sin(2\pi x)$."]
ans = 3
radioq(choices, ans)
```

Does the graph of `f(x)=sin(500*pi*x)` look like the same function over the interval $[0,2\pi]$ as it does over $[0,1]$?

```
choices = ["Yes", "No"]
ans = 2
radioq(choices, ans)
```


###### Question

The *viewport* of a graph is the $x$-$y$ range of the viewing window.
By default, the $y$-part of the viewport is determined by the range of
the function over the specified interval $[a,b]$. For some functions
this can produce poor graphs, especially when there is a vertical
asymptote. Here are two ways to restrict this with `Gadfly`:

- Add an argument `Scale.y_continuous(minvalue=-10, maxvalue=10))`

- trim the $y$ values returned by the function so that if they are bigger than 10, say, they are not shown. For this, a function like following can be useful:

```
trim(f; c=10) =  x -> abs(f(x)) > c ? NaN : f(x)
```

The latter might be used as follows:

```
Verbatim("""
f(x) = 1/x
plot(trim(f), -1,1)
""")
```

Compare the graph of the above with the graph without `trim`. What would you say:

```
choices = ["They appear the same, using `trim` just complicates things.",
           "The trimmed graph is not influenced by the vertical asymptote at 0. It is a better graph.",
           "There is an error when plotting `trim(f)`."]
ans = 2
radioq(choices, ans)
```


###### Question

Make this parametric plot for the specific values of the parameters `k` and `l`. What shape best describes it?

```
Verbatim("""
R, r, rho = 1, 3/4, 1/4
f(t) = (R-r) * cos(t) + rho * cos((R-r)/r * t)
g(t) = (R-r) * sin(t) - rho * sin((R-r)/r * t)

xs = linspace(0, max((R-r)/r, r/(R-r))*2pi, 1000)
plot(x = map(f, xs), y = map(g, xs), Geom.line(preserve_order=true))
""")
```

```
choices = [
"Four sharp points, like a star",
"Four petals, like a flower",
"A circle",
"A straight line"
]
ans = 2
radioq(choices, ans)
```



###### Question

Make this plot for the specific values of the parameters `r` and `rho`. What shape best describes it?

```
Verbatim("""
R, r, rho = 1, 1/2, 1/4
f(t) = (R-r) * cos(t) + rho * cos((R-r)/r * t)
g(t) = (R-r) * sin(t) - rho * sin((R-r)/r * t)

xs = linspace(0, max((R-r)/r, r/(R-r))*2pi, 1000)
plot(x = map(f, xs), y = map(g, xs), Geom.line(preserve_order=true))
""")
```

```
choices = [
"Four sharp points, like a star",
"Four petals, like a flower",
"A circle",
"A straight line"
]
ans = 3
radioq(choices, ans)
```



###### Question

Make this plot for the specific values of the parameters `r` and `rho`. What shape best describes it?

```
Verbatim("""
R, r, rho = 1, 1/4, 1
f(t) = (R-r) * cos(t) + rho * cos((R-r)/r * t)
g(t) = (R-r) * sin(t) - rho * sin((R-r)/r * t)

xs = linspace(0, max((R-r)/r, r/(R-r))*2pi, 1000)
plot(x = map(f, xs), y = map(g, xs), Geom.line(preserve_order=true))
""")
```

```
choices = [
"Four sharp points, like a star",
"Four petals, like a flower",
"A circle",
"A straight line"
]
ans = 2
radioq(choices, ans)
```
