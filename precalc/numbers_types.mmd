# Number systems


In mathematics, there are many different number systems in common
use. For example by the end of pre-calculus, all of the following have
been introduced:

* The integers, $\{\dots, -3, -2, -1, 0, 1, 2, 3, \dots\}$;
* The rational numbers, $\{p/q: p, q  \text{ are integers}, q \neq 0\}$;
* The real numbers, $\{x: -\infty < x < \infty\}$;
* The complex numbers, $\{a + bi: a,b \text{ are real numbers and } i^2=-1\}$.

On top of these, we have special subsets, such as the natural numbers $\{0, 1, 2, \dots\}$, the even numbers, the odd numbers, positive numbers, non-negative numbers, etc.

Mathematically, these number systems are naturally nested within each
other as integers are rational numbers which are real numbers, which
can be viewed as part of the complex numbers.

## Closure

A desirable algebraic property of a set of numbers and an operation on
them is *closure*. That is, if one takes an operation like `+` and add
two numbers in a set, will that result also be in the set? If so for
any pair of numbers, then the set is closed with respect to
addition. For the even numbers with `+`, the answer is yes and for the odd
numbers, false as, the sum of any two odd numbers is even, for
example, $3+3=6$. If we start with the *natural numbers*, then it is
closed under addition, However, if you think of subtraction as the
operation, then the natural numbers are not closed under subtraction,
as, for example, $1 - 2 = -1$. The integers are closed under addition,
subtraction, and, as well, multiplication. That being said, once we
look at division, closure is no longer the case for the integers, as,
for example $1/2$ is not an integer. Before talking about the rational
numbers, which are closed by division -- as long as we don't try to
divide by 0, we note that there are other ideas of division of
integers. Euclidean division decomposes $a/b$ via $a = q \cdot b + r$,
where $0 \leq r < q$, $q$, $r$ are integers. The value $r$ is the
*remainder* and $q$ the *quotient*.

<!-- cf https://github.com/JuliaLang/julia/issues/9283#issuecomment-72710205 -->

Back to the rational numbers. These are closed under addition, subtraction, multiplication, and division (with the standard caveat about dividing by 0). 

### Powers

But now, let's consider powers.  Powers are defined for positive integers in a simple enough manner

$$~
a^n=a\cdot a \cdot a \cdots a \text{ (n times); }  a, n \text{ are integers, $n$ is positive}.
~$$

We can define $a^0$ to be $1$, except for the special case of $0^0$, which is left undefined mathematically.

(Here we abuse the notion of closure, as we don't assume the same number system for the base and the exponent. Above, $a^n$ can be defined the same way for $a$ a real number and $n$ a positive integer. For any $a$ and $n$ $a^n$ will be a real number (except $0^0$) so we consider the operation $a$ into $a^n$ closed.)


This extends easily to define integer powers of rational numbers:
$(p/q)^n = p^n/q^n$. Negative integer powers are handled with a
reciprocal through $p^{-n} = 1/p^n$. For postive, rational powers,
like $p^{1/n}$ a reference to these as solutions to $x^n=p$ is
used. With that, we can define values of $p^{m/n}$ as $(p^m)^{1/n}$,
so defining the value is possible. However, solutions to $x^n=p$ may
not be rational, e.g., $x^2=2$ has solutions $\sqrt{2}$ and
$-\sqrt{2}$. The operation `^` is not closed for the rational
exponents. For closure under powers, the real numbers are needed as
the set provided we restrict the base to $p \geq 0$ and complex
numbers are needed for closure if we allow $p$ to be negative e.g.,
$(-1)^{1/2}$ is the definition of $i$, the imaginary unit.

> So closure of the number systems under the basic operations depends on the system and the operation. 

As you can see, even with these familiar operations, the desire for
simple things, such as the natural numbers and closure, leads one
naturally into the need for more complicated systems such as the real
numbers or complex numbers.

## Julia and number systems

With `Julia`, such distinctions are also made. `Julia` has types for each of the four basic number systems above. This is unlike most calculators which use just a floating-point type, a model for the real numbers.

Consider the number 1. It is both an integer, rational, real and complex number. To construct "1" in each type within `Julia` we have these different styles:

```
1, 1.0, 1//1, 1 + 0im
```

The basic number types in `Julia` are `Int`, `Float64`, `Rational` and `Complex`, though in fact there are many more. This distinction is important, as the type of number dictates how it will be stored and how precisely the stored value is to the mathematical value it represents.

As is seen in the last example, `Julia`'s parser can distinguish these types through an easy to understand syntax:

* integers have no decimal point;
* floating point numbers have a decimal point (or are in scientific notation);
* rationals are constructed from integers using the double division operator, `//`; and
* complex numbers are formed by including a term with the imaginary unit, `im`.

```
alert("""
Heads up, the difference between `1` and `1.0` is subtle (and even more so, as `1.` will parse as `1.0`). 
""")
```

Julia also has *abstract types* `Integer`, `Real`, and `Number`, all of the above are also of type `Number`, but `Complex` is not of type `Real`. Abstract types allow code to be written generically for different concrete types.  For example the square root of any `Real` number is defined generically by the square root of that number converted to floating point, so that `sqrt(1)`, `sqrt(1.0)`, and `sqrt(1//1)` are all computed identically. An abstract type like `Integer` might seem redundant at first, but there are many different types of "integers" provided by `Julia`: for example, 32-bit integers, 64-bit integers, "big" integers (multiprecision integers), and numerous types of unsigned integers (which are useful for some types of programming).

```
note("""

That numbers without decimal points are read in as integers is accurate, but that they will be of type `Int` is typical though not always the case. `Julia` will use different storage types for each of `1234567890`, `12345678901234567890`, and `1234567890123456789012345678901234567890`.

""")
```

## Integers

Depending on the underlying computer system, basic integers  (`Int`s) in `Julia` are stored with 64 bits or 32 bits, For a 64 bit integer, there are $2^{64}$ possible values that can be represented, as each "bit" can have only one of two possible values. Roughly half are negative and half are positive. The largest positive number is $2^{63}-1$. Notice what comes of trying to compute $2^{63}$ on a 64-bit machine:

```
2^63
```

It produces a negative number! 

The fact that negative numbers can occur -- and not the desired number -- results from a compromise made in `Julia`'s design: some operations aren't checked for overflow so that they run faster (much faster). This is something the user must be aware of, especially on a 32-bit system, where the representable integers can only be as big as $4,294,967,295$ -- which is not even 5 billion.

(Julia provides the `typemax` function to return the largest value for
a number type. It can verify the largest representable integer with
`typemax(Int)`.)

## Floating point numbers


As mentioned, integers are not closed under division as the result can lead to rational numbers. Similarly, in `Julia`, division of two integers using `/` will not be an integer, rather it will *always* be a floating point number -- even dividing by `1` where an integer answer is possible:

```
2/1
```

To make a rational number from division of integers, the double `//` is used, as in `2//1`.

```
note("""

The basic operations in `Julia` are engineered to give the same *type*
of output given the same *type(s)* of input. This is for performance
reasons. This is the concept of *type stability*.

""")
```

[Floating point](http://en.wikipedia.org/wiki/Floating_point) numbers
are a computational model for the real numbers.  For floating point
numbers, 64 bits are used for both 32- and 64-bit systems. This gives
a large -- but still finite -- set of numbers that can be
represented. However, there are infinitely many real numbers just
between $0$ and $1$, so there is no chance that all can be represented
exactly on the computer with a floating point value. Floating point
then is *necessarily* an approximation for all but a subset of the
real numbers. Floating point values can be viewed in normalized
[scientific notation](http://en.wikipedia.org/wiki/Scientific_notation)
as $a\cdot 2^b$ where $a$ is the *significand* and $b$ is the
*exponent*. The significand $a$ is normalized to satisfy $1 \leq \lvert a\rvert <
2$, the exponent can be taken to be an integer, possibly negative.

As per IEEE Standard 754, the `Float64` type gives 52 bits to the precision (with an additional implied one), 11 bits to the exponent and the other bit is used to represent the sign.  Positive, finite, floating point numbers have a range approximately between $10^{-308}$ and $10^{308}$, as 308 is about $\log_{10}\cdot 2^{1023}$. The numbers are not evenly spread out over this range, but rather are much more concentrated closer to $0$.


```
WeavePynb.popup("""
You can discover more about the range of floating point values provided by calling a few different functions.

- `typemax(0.0)` gives the largest (`Inf`).

- `prevfloat(Inf)` gives the largest finite one.

- similarly `nextfloat(-Inf)` gives the smallest finite one.

- `nextfloat(0.0)` gives the closest positive value to 0.

- `eps()`  gives the distance to the next floating point number bigger than `1.0`. This is sometimes referred to as machine precision.

""", title="More on floating point", label="More on the range of floating point values")
```

### Scientific notation

Floating point numbers may print in a familiar manner:

```
1.23
```

or may be represented in scientific notation:

```
6.23 * 10.0^23
```

The special coding `aeb` (or if the exponent is negative `ae-b`) is
used to represent the number $a \cdot 10^b$ ($1 \leq a < 10$). This
notation can be used directly to specify a floating point value:

```
6.23e23
```

The first way of representing this number required using `10.0` and not `10` as the integer power will return an integer and even for 64-bit systems is only valid up to `10^18`. Using scientific notation avoids having to concentrate on such limitations.

##### Example

Floating point values in scientific notation will always be normalized. This is easy for the computer to do, but tedious to do by hand. Here we see:

```
4e30 * 3e40, 3e40 / 4e30
```

The power in the first is 71, not 70 = 30+40, as the product of 3 and 4 as 12 or `1.2e^1`. (We also see the artifact of `1.2` not being exactly representable in floating point.)

### Special values: Inf, -Inf, NaN

The coding of floating point numbers also allows for the special values of `Inf`, `-Inf` to represent positive and negative infinity. As well, a special value `NaN` ("not a number") is used to represent a value that arises when an operation is not closed (e.g., $0.0/0.0$ yields `NaN`). Except for negative bases, the floating point numbers with the addition of `Inf` and `NaN` are closed under the operations `+`, `-`, `*`, `/`, and `^`. Here are some computations that produce `NaN`:

```
0/0, Inf/Inf, Inf - Inf, 0 * Inf
```

Whereas, these produce an infinity

```
1/0, Inf + Inf, 1 * Inf
```

Finally, these are mathematically undefined, but still yield a finite value:

```
0^0, Inf^0
```

### Floating point numbers and real numbers

Floating point numbers are an abstraction for the real numbers. For
the most part this abstraction works in the background, though there
are cases where one needs to have it in mind. Here are a few:

* For real and rational numbers, between any two numbers $a < b$,
  there is another real number in between. This is not so for floating
  point numbers which have a finite precision. (Julia has some
  functions for working with this distinction.)

* Floating point numbers are approximations for most values, even
  simple ones like $1/3$. This leads to oddities such as this value
  not being $0$:

```
sqrt(2)*sqrt(2) - 2
```

It is no surprise that an irrational number, like $\sqrt{2}$, can't be represented **exactly** within floating point, but it is perhaps surprising that simple numbers can not be, so $1/3$, $1/5$, $\dots$ are approximated. Here is a surprising-at-first consequence:

```
1/10 + 2/10 == 3/10
```

That is adding `1/10` and `2/10` is not exactly `3/10`, as expected mathematically.
Such differences are usually very small and are generally attributed to rounding error. The user needs to be mindful when testing for equality, as is done above with the `==` operator.

* Floating point addition is not necessarily associative, that is the property $a + (b+c) = (a+b) + c$ may not hold exactly. For example:

```
1/10 + (2/10 + 3/10) == (1/10 + 2/10) + 3/10
```

* For real numbers subtraction of similar-sized numbers is not exceptional, for example $1 - \cos(x)$ is positive if $0 < x < \pi/2$, say. This will not be the case for floating point values. If $x$ is close enough to $0$, then $\cos(x)$ and $1$ will be so close, that they will be represented by the same floating point value, `1.0`, so the difference will be zero:

```
1.0 - cos(1e-8)
```

## Rational numbers

Rational numbers in `Julia` are stored as two numbers `den` and `num`, each some type of integer. They can exactly represent a rational number. Unlike with floating point values, this leads to the familiar things being true:

```
1//10 + 2//10 == 3//10
```

And associativity:

```
(1//10 + 2//10) + 3//10 == 1//10 + (2//10 + 3//10)
```


Rational numbers are closed under the operations `+`, `-`, `*`, and `/` and as well `^` with integer powers. For example,

```
1//2 + 1//3, 1//2 * 1//3, 1//2 / 1//3, (1//2)^4
```

Non-integer powers are converted to floating point:

```
(1//2)^(1//2)   # the first parentheses are necessary as `^` will be evaluated before `//`.
```

However, this exactness comes at a cost in terms of speed of operations and limitation of the range of numbers that can be represented. For example, for 64-bit integers, the smallest positive value would be limited to be about $10^{-19}$ and not $10^{-308}$, as it is for floating point. Their primary usage within `Julia` is when exactness is important.

### Different types of real numbers

This table shows what attributes are implemented for the different types.

```
using DataFrames
attributes = ["construction", "exact", "wide range", "has infinity", "has `-0`", "fast", "closed under"]
integer = [q"1", true, false, false, false, true, "`+`, `-`, `*`"]
rational = [q"1//1", true, false, false, false, false, "`+`, `-`, `*`,<br/> `/` (non zero denominator),<br/>`^` (integer power)"]
float = [q"1.0", "not usually", true, true, true, true, "`+`, `-`, `*`,<br/> `/` (possibly `NaN`, `Inf`),<br/>`^` (non-negative base)"]
d = DataFrame(Attributes=attributes, Integer=integer, Rational=rational, FloatingPoint=float)
table(d)
```




## Complex numbers

Complex numbers in `Julia` are stored as two numbers, `re` and `im`, each some type of `Real` number. The special constant `im` is used to represent $i=\sqrt{-1}$.  This makes the construction of complex numbers fairly standard:

```
1 + 2im, 3 + 4.0im
```

(These two aren't exactly the same, the `3` is promoted from an integer to a float to match the `4.0`. Each of the components must be of the same type of number.)

Mathematically, complex numbers are needed so that certain equations can be satisfied. For example $x^2 = -2$ has solutions $-\sqrt{2}i$ and $\sqrt{2}i$ over the complex numbers. Finding this in `Julia` requires some attention, as we have both `sqrt(-2)` and `sqrt(-2.0)` throwing a `DomainError`, as the `sqrt` function expects non-negative real arguments. However first creating a complex number does work:

```
sqrt(-2 + 0im)
```

For complex arguments, the `sqrt` function will return complex values (even if the answer is a real number).

This means, if you wanted to perform the quadratic equation for any real inputs, your computations might involve something like the following:

```
a,b,c = 1,2,3  ## x^2 + 2x + 3
discr = b^2 - 4a*c
(-b + sqrt(discr + 0im))/(2a), (-b - sqrt(discr + 0im))/(2a)
```

When learning calculus, the only common usage of complex numbers arises when solving polynomial equations for roots, or zeros, though they are very important for subsequent work using the concepts of calculus.

## And why you needn't worry too much

Despite all of these types floating around, for the most part the distinction is of no concern to the `Julia` user. Consider the following sum:

```
1 + 1.25 + 3//2
```

The sum of an integer, a floating point number and rational number returns a floating point number without a complaint. This is because of the promotion mechanism for the binary operations. The basic definition of `x + y` in `julia` does the following: first promote `x` and `y` to a common type, then add the two numbers of the same type. When the above computation, `1 + 1.25 + 3//2` is parsed, first `1` and `1.25` are added. This is done by promoting `1` to a floating point (as one can't easily promote a floating point value to an integer without a loss of information). The result, `2.25` is then added to `3//2`. Again, the rational number is promoted to a floating point and the two are added (though technically, a floating point could be promoted to a rational, in general floating point numbers model the real numbers and there is no way to take an arbitrary real number and create a rational). A similar thing happens when complex numbers are used, though there each component is promoted. So, except for some special cases (like integer bases raised to integer powers) where the output is best suited to be a type different from a floating point value, the details are just handled in the background.

## Questions

###### Question

The number created by `pi/2` is?

```
choices = ["Integer", "Rational", "FloatingPoint", "Complex", "None, an error occurs"]
ans = 3
radioq(choices, ans, keep_order=true)
```

###### Question

The number created by `2/2` is?

```
ans = 3
radioq(choices, ans, keep_order=true)
```

###### Question

The number created by `2//2` is?

```
ans = 2
radioq(choices, ans, keep_order=true)
```

###### Question

The number created by `1 + 1//2 + 1/3` is?

```
ans = 3
radioq(choices, ans, keep_order=true)
```

###### Question


The number created by `2^3` is?

```
ans = 1
radioq(choices, ans, keep_order=true)
```

###### Question


The number created by `sqrt(im)` is?

```
ans = 4
radioq(choices, ans, keep_order=true)
```

###### Question


The number created by `2^(-1)` is?

```
ans = 5
radioq(choices, ans, keep_order=true)
```

###### Question



The "number" created by `1/0` is?

```
ans = 3
radioq(choices, ans, keep_order=true)
```

###### Question

Is `(2 + 6) + 7` equal to  `2 + (6 + 7)`?

```
yesnoq(true)
```


###### Question

Is `(2/10 + 6/10) + 7/10` equal to `2/10 + (6/10 + 7/10)`?

```
yesnoq(false)
```


